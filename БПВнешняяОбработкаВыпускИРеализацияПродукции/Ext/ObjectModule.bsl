
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Обработка для формирования документов выпуска и реализация продукции для БП 3.0'");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = ВерсияОбъектаСтрокой();
	ПараметрыРегистрации.БезопасныйРежим = Истина;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Выпуск и реализация продукции для БП 3.0";
	НоваяКоманда.Идентификатор = "БПВнешняяОбработкаВыпускИРеализацияПродукции";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область СозданиеДокументов

Функция СоздатьДокументы(ТабДокумент, ВходящиеВидыДокументов, ДополнительныеПараметрыДокументов = Неопределено) Экспорт
	
	ВидыДокументов = ПолучитьВидыДокументов(ВходящиеВидыДокументов);
	
	Если ВидыДокументов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗаполнения = ПолучитьДанныеЗаполнения(ВидыДокументов, ДополнительныеПараметрыДокументов);
	
	ДанныеОТоварах = ПолучитьДанныеОТоварах(ТабДокумент);
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(ДанныеОТоварах.Номенклатура, ДанныеЗаполнения, Ложь, Истина);
	
	НужныСпецификации 	= ВидыДокументов.ОтчетПроизводстваЗаСмену.Заполнять;
	Спецификации 		= ?(НужныСпецификации, ПолучитьСпецификации(ДанныеОТоварах.Номенклатура), Новый Соответствие);
	
	НужныДоговоры 	= ВидыДокументов.РеализацияТоваровУслуг.Заполнять;
	Договоры 		= ?(НужныДоговоры, ПолучитьДоговорыСРеквизитами(ДанныеОТоварах.Контрагенты, Организация), Неопределено);
	
	#Область ТаблицаДокументов
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ");
	ТаблицаДокументов.Колонки.Добавить("ТаблицаТоваров");
	ТаблицаДокументов.Колонки.Добавить("ИмяТаблЧасти");
	
	// ОтчетПроизводстваЗаСмену
	Если ВидыДокументов.ОтчетПроизводстваЗаСмену.Заполнять Тогда
		
		ТаблицаТоваров = ПолучитьТаблицуИзДереваТоваров(ДанныеОТоварах.ДеревоНоменклатуры);
		ТаблицаТоваров.Свернуть("Номенклатура", "Количество");
		
		НовыйДокумент 	= СоздатьДокументОбъект(ВидыДокументов.ОтчетПроизводстваЗаСмену.Имя, ДанныеЗаполнения);
		НовыйДокумент.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.Документ = НовыйДокумент;
		НоваяСтрока.ТаблицаТоваров = ТаблицаТоваров;
		НоваяСтрока.ИмяТаблЧасти = "Продукция";
		
	КонецЕсли;
	
	// РеализацияТоваровУслуг
	Если ВидыДокументов.РеализацияТоваровУслуг.Заполнять Тогда
		
		Для Каждого СтрокаПолучатель Из ДанныеОТоварах.ДеревоНоменклатуры.Строки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаПолучатель.Контрагент) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыЗаполненияШапки = Новый Структура;
			ПараметрыЗаполненияШапки.Вставить("Контрагент", 			СтрокаПолучатель.Контрагент);
			ПараметрыЗаполненияШапки.Вставить("ДоговорКонтрагента", 	ПолучитьДоговор(Договоры, СтрокаПолучатель.Контрагент));
			
			НовыйДокумент = СоздатьДокументОбъект(ВидыДокументов.РеализацияТоваровУслуг.Имя, ДанныеЗаполнения, ПараметрыЗаполненияШапки);
			НовыйДокумент.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
			
			НоваяСтрока = ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ 		= НовыйДокумент;
			НоваяСтрока.ТаблицаТоваров 	= СтрокаПолучатель.Строки;
			НоваяСтрока.ИмяТаблЧасти 	= "Товары";
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЗаполнениеДокументов
	
	ПараметрыЗаполненияСтроки = Новый Структура(
	"Количество,Цена,ПлановаяСтоимость,Коэффициент,
	|Номенклатура,ЕдиницаИзмерения,НоменклатурнаяГруппа,Субконто,СтавкаНДС,Спецификация", 0,0,0,1);
	
	ПараметрыОбнуленияСтроки = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОбнуленияСтроки, ПараметрыЗаполненияСтроки);
	
	НачатьТранзакцию();
	Попытка
		
		// Заполняем табличную часть документов
		Для Каждого СтрокаДокумент Из ТаблицаДокументов Цикл
			
			Объект = СтрокаДокумент.Документ;
			ТипОбъекта = ТипЗнч(Объект);
			
			Для Каждого СтрокаТовары Из СтрокаДокумент.ТаблицаТоваров Цикл
				
				ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияСтроки, ПараметрыОбнуленияСтроки);
				ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияСтроки, СтрокаТовары);
				
				Если СведенияОНоменклатуре[СтрокаТовары.Номенклатура] <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияСтроки, СведенияОНоменклатуре[СтрокаТовары.Номенклатура]);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ПараметрыЗаполненияСтроки.НоменклатурнаяГруппа) Тогда
					ПараметрыЗаполненияСтроки.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				КонецЕсли;
				
				Если ПараметрыЗаполненияСтроки.ПлановаяСтоимость = 0 Тогда
					ПараметрыЗаполненияСтроки.ПлановаяСтоимость = 0.01;
				КонецЕсли;
				
				ПараметрыЗаполненияСтроки.Спецификация = Спецификации[СтрокаТовары.Номенклатура];
				
				НоваяСтрока = Объект[СтрокаДокумент.ИмяТаблЧасти].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыЗаполненияСтроки);
				
				Если ТипОбъекта = ВидыДокументов.РеализацияТоваровУслуг.ТипОбъекта Тогда
					
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Объект.СуммаВключаетНДС);
					
				ИначеЕсли ТипОбъекта = ВидыДокументов.ОтчетПроизводстваЗаСмену.ТипОбъекта Тогда
					
					ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(НоваяСтрока);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТипОбъекта = ВидыДокументов.ОтчетПроизводстваЗаСмену.ТипОбъекта Тогда
				
				Если ЗаполнятьМатериалы Тогда
					
					ВедетсяУчетЗатратПоПродукции = ДанныеЗаполнения.ПоДокументам[ВидыДокументов.ОтчетПроизводстваЗаСмену.Имя].ВедетсяУчетЗатратПоПродукции;
					ВедетсяУчетПрослеживаемыхТоваров = ДанныеЗаполнения.ПоДокументам[ВидыДокументов.ОтчетПроизводстваЗаСмену.Имя].ВедетсяУчетПрослеживаемыхТоваров;
					
					Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьМатериалыПоПродукцииУслугам(
						Объект.Материалы,
						Объект.Продукция.Выгрузить(),
						Объект.Услуги.Выгрузить(),
						ВедетсяУчетЗатратПоПродукции,
						ВедетсяУчетПрослеживаемыхТоваров,
						Объект.Дата);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Объект.Записать(РежимЗаписиДокумента.Запись);
			
			Если ТипОбъекта = ВидыДокументов.РеализацияТоваровУслуг.ТипОбъекта Тогда
				
				Если ВыписыватьСчетаФактуры Тогда
					ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры();
					ПараметрыСоздания.Основание = Объект.Ссылка;
					ПараметрыСоздания.ЭтоУниверсальныйДокумент = Объект.ЭтоУниверсальныйДокумент;
					//ПараметрыСоздания.КодВидаОперации = Форма.КодВидаОперации; // ?
					ПараметрыСоздания.УникальныйИдентификатор = Неопределено;
					
					Результат = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания);
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	#КонецОбласти
	
	МассивДокументов = Новый Массив;
	
	Для Каждого СтрокаДокумент Из ТаблицаДокументов Цикл
		МассивДокументов.Добавить(СтрокаДокумент.Документ.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция ДоступныеВидыДокументов() Экспорт

	ДоступныеДокументы = Новый СписокЗначений;
	ДоступныеДокументы.Добавить("ОтчетПроизводстваЗаСмену", "Отчет производства за смену");
	ДоступныеДокументы.Добавить("РеализацияТоваровУслуг", "Реализация (акты, накладные)");
	
	Возврат ДоступныеДокументы;

КонецФункции

#КонецОбласти

#Область НастройкиКомпоновкиДанных

Функция ПолучитьСКД() Экспорт

	Возврат ПолучитьМакет("СхемаКомпоновкиДанных");

КонецФункции

Функция ПолучитьСправочникиПоОтбору(Настройки, АдресСКД = Неопределено) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресСКД) Тогда
		
		СКД = ПолучитьИзВременногоХранилища(АдресСКД);
		
		Если ТипЗнч(СКД) <> Тип("СхемаКомпоновкиДанных") Тогда
			СКД = ПолучитьСКД();
		КонецЕсли;
		
	Иначе
		СКД = ПолучитьСКД();
	КонецЕсли;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДеревоЗначений = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
	ЭлементыСправочников = Новый Структура;
	ЭлементыСправочников.Вставить("Контрагенты");
	ЭлементыСправочников.Вставить("Номенклатура");
	
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		ЭлементыСправочников.Вставить(СтрокаДерева.ВидСправочника, СтрокаДерева.Строки.ВыгрузитьКолонку("Ссылка"));
	КонецЦикла;
	
	Возврат ЭлементыСправочников;

КонецФункции

Процедура ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек_, УИ, АдресСКД = Неопределено) Экспорт
	
	СКД = ПолучитьСКД();
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, УИ);
	
	КомпоновщикНастроек_.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД));
	КомпоновщикНастроек_.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиТабличногоДокумента

Процедура НастроитьПолеТабличногоДокумента(ТабличныйДокумент) Экспорт
	
	ТабличныйДокумент.Очистить();
	Макет = ПолучитьМакет("МакетТабличногоДокумента");
	
	Область = Макет.ПолучитьОбласть("Строка1|Колонка1");
	ТабличныйДокумент.Вывести(Область);
	
	НастройкиКолонокПоУмолчанию = НастройкиКолонокПоУмолчанию();
	КоличествоКолонок 	= ?(КоличествоКолонок = 0, НастройкиКолонокПоУмолчанию.КоличествоКолонок, КоличествоКолонок);
	КоличествоСтрок 	= ?(КоличествоСтрок = 0, НастройкиКолонокПоУмолчанию.КоличествоСтрок, КоличествоСтрок);
	ШиринаКолонки 		= ?(ШиринаКолонки = 0, НастройкиКолонокПоУмолчанию.ШиринаКолонки, ШиринаКолонки);
	
	НомерПервойКолонки 		= Область.ШиринаТаблицы + 1;
	НомерПоследнейКолонки 	= Область.ШиринаТаблицы + КоличествоКолонок;
	НомерПервойСтроки 		= Область.ВысотаТаблицы + 1;
	НомерПоследнейСтроки 	= Область.ВысотаТаблицы + КоличествоСтрок;
	НомерСтрокиИтого 		= 2;
	
	Область = Макет.ПолучитьОбласть("Строка1|Колонка2");
	Область.ТекущаяОбласть.ШиринаКолонки = ШиринаКолонки;
	
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		ТабличныйДокумент.Присоединить(Область);
	КонецЦикла;
	
	ОбластьСтрока = Новый ТабличныйДокумент;
	ОбластьСтрока.Вывести(Макет.ПолучитьОбласть("Строка2|Колонка1"));
	Область = Макет.ПолучитьОбласть("Строка2|Колонка2");
	
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		ОбластьСтрока.Присоединить(Область);
	КонецЦикла;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ТабличныйДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ТабличныйДокумент.ФиксацияСверху = 2;
	ТабличныйДокумент.ФиксацияСлева = 1;
	
КонецПроцедуры

Функция НастройкиКолонокПоУмолчанию() Экспорт

	Результат = Новый Структура("КоличествоКолонок,КоличествоСтрок,ШиринаКолонки", 100, 100, 6.125);
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбщиеНастройкиОбработки

Функция ОбщиеПараметрыФормы() Экспорт
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("АдресПубликации", "https://infostart.ru/1c/tools/2027409/");
	
	ЗаголовокФормы = "Обработка Выпуск и реализация продукции для БП 3.0 (%1)";
	ЗаголовокФормы = СтрШаблон(ЗаголовокФормы, ВерсияОбъектаСтрокой());
	
	ОбщиеПараметры.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	
	НадписьПубликация = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока("Публикация на INFOSTART.RU",,,, ОбщиеПараметры.АдресПубликации));
	ОбщиеПараметры.Вставить("НадписьПубликация", НадписьПубликация);
	ОбщиеПараметры.Вставить("Комментарий", ПолучитьКомментарий());
	
	ОбщиеПараметры.Вставить("КлючОбъекта", "БПВнешняяОбработкаВыпускИРеализацияПродукции");
	ОбщиеПараметры.Вставить("КлючНастроек", "ВариантОткрытияФайла");
	
	Возврат ОбщиеПараметры;
	
КонецФункции

Функция ВерсияОбъектаСтрокой() Экспорт
	
	Возврат "1.01";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СозданиеДокументов

Функция СоздатьДокументОбъект(ИмяДокумента, ПараметрыЗаполненияОбщие = Неопределено, ПараметрыЗаполненияШапки = Неопределено)
	
	ДокументОбъект = Документы[ИмяДокумента].СоздатьДокумент();
	
	Если ЗначениеЗаполнено(ПараметрыЗаполненияОбщие) Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ПараметрыЗаполненияОбщие);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ПараметрыЗаполненияОбщие.ПоДокументам[ИмяДокумента]);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗаполненияШапки) Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ПараметрыЗаполненияШапки);
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ДокументОбъект);
	
	Возврат ДокументОбъект;
	
КонецФункции

Функция ПолучитьВидыДокументов(ВидыДокументовСтрокой)

	СписокВидовДокументов = СтрРазделить(ВидыДокументовСтрокой, ",", Ложь);
	Если СписокВидовДокументов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Для Каждого ДоступныйДокумент Из ДоступныеВидыДокументов() Цикл
		Результат.Вставить(ДоступныйДокумент.Значение, ОписаниеВидаДокумента(ДоступныйДокумент.Значение));
	КонецЦикла;
	
	ЕстьДоступныйВидДокумента = Ложь;
	ЗаполнятьВсеДокументы = ВРег(СписокВидовДокументов[0]) = ВРег("ВсеДокументы");
	
	Для Каждого ВидДокументаКиЗ Из Результат Цикл
		
		Если Не ЗаполнятьВсеДокументы И СписокВидовДокументов.Найти(ВидДокументаКиЗ.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВидДокументаКиЗ.Значение.Заполнять = Истина;
		
		Если Не ЕстьДоступныйВидДокумента Тогда
			ЕстьДоступныйВидДокумента = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьДоступныйВидДокумента Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

Функция ОписаниеВидаДокумента(ИмяДокумента)

	ТипОбъекта = Тип(СтрШаблон("ДокументОбъект.%1", ИмяДокумента));
	Возврат Новый Структура("Заполнять,Имя,ТипОбъекта", Ложь, ИмяДокумента, ТипОбъекта);

КонецФункции

#Область ДанныеЗаполнения

Функция ПолучитьДанныеЗаполнения(ВидыДокументов, ДополнительныеПараметры = Неопределено)
	
	ОбщиеДанныеЗаполнения = Новый Структура("Дата, Организация, Склад, ТипЦен, ТипЦенПлановойСебестоимости");
	ЗаполнитьЗначенияСвойств(ОбщиеДанныеЗаполнения, ЭтотОбъект);
	ОбщиеДанныеЗаполнения.Вставить("ТипЦен", 		ТипЦенПродажи);
	ОбщиеДанныеЗаполнения.Вставить("Склад", 		Склад);
	ОбщиеДанныеЗаполнения.Вставить("Подразделение", Подразделение);
	
	СуммаВключаетНДС = Истина;
	Если ЗначениеЗаполнено(ОбщиеДанныеЗаполнения.ТипЦен) Тогда 
		СуммаВключаетНДС = ОбщиеДанныеЗаполнения.ТипЦен.ЦенаВключаетНДС;
	Иначе
		ОбщиеДанныеЗаполнения.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	ОбщиеДанныеЗаполнения.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	Если Не ЗначениеЗаполнено(ОбщиеДанныеЗаполнения.ТипЦенПлановойСебестоимости) Тогда 
		ОбщиеДанныеЗаполнения.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);
	КонецЕсли;
	
	ОбщиеДанныеЗаполнения.Вставить("Комментарий", ПолучитьКомментарий());
	
	#Область ДанныеЗаполнения_ПоДокументам
	
	ОбщиеДанныеЗаполнения.Вставить("ПоДокументам", Новый Структура);
	
	ДатаДокумента = НачалоДня(ОбщиеДанныеЗаполнения.Дата) + 60 * 60 * 12;
	
	Если ВидыДокументов.ОтчетПроизводстваЗаСмену.Заполнять Тогда
		
		ВидДокумента = ВидыДокументов.ОтчетПроизводстваЗаСмену.Имя;
		
		ДанныеЗаполненияДокумента = Новый Структура;
		ДанныеЗаполненияДокумента.Вставить("Дата", 			Макс(ДатаДокумента - 1, ДатаВремяКрайнегоДокумента(ВидДокумента)) + 1); // Отчеты вводим с 12 часов.
		ДанныеЗаполненияДокумента.Вставить("ВидОперации", 	Перечисления.ВидыОперацийОтчетПроизводстваЗаСмену.ОтчетПроизводстваЗаСмену);
		ДанныеЗаполненияДокумента.Вставить("СчетЗатрат", 	?(ЗначениеЗаполнено(СчетЗатрат), СчетЗатрат, ПланыСчетов.Хозрасчетный.ОсновноеПроизводство));
		
		Если ЗначениеЗаполнено(Подразделение) Тогда 
			ДанныеЗаполненияДокумента.Вставить("ПодразделениеОрганизации", 	Подразделение);
			ДанныеЗаполненияДокумента.Вставить("ПодразделениеЗатрат", 		Подразделение);
		КонецЕсли;
		
		ДанныеЗаполненияДокумента.Вставить("ВедетсяУчетПрослеживаемыхТоваров",
			ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
			И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(ОбщиеДанныеЗаполнения.Дата));
		
		ДанныеЗаполненияДокумента.Вставить("ВедетсяУчетЗатратПоПродукции",
			Справочники.НастройкиУчетаЗатрат.ВедетсяУчетЗатратПоПродукции(ОбщиеДанныеЗаполнения.Дата, ДанныеЗаполненияДокумента.СчетЗатрат, ОбщиеДанныеЗаполнения.Организация));
		
		ОбщиеДанныеЗаполнения.ПоДокументам.Вставить(ВидыДокументов.ОтчетПроизводстваЗаСмену.Имя, ДанныеЗаполненияДокумента);
	
	КонецЕсли;
	
	Если ВидыДокументов.РеализацияТоваровУслуг.Заполнять Тогда
		
		ВидДокумента = ВидыДокументов.РеализацияТоваровУслуг.Имя;
		
		ДанныеЗаполненияДокумента = Новый Структура;
		ДанныеЗаполненияДокумента.Вставить("Дата", 					Макс(ДатаДокумента - 1 + 60 * 60 * 2, ДатаВремяКрайнегоДокумента(ВидДокумента)) + 1); // Реализации вводим с 14 часов.
		ДанныеЗаполненияДокумента.Вставить("ВидОперации", 			Перечисления.ВидыОперацийРеализацияТоваров.Товары);
		ДанныеЗаполненияДокумента.Вставить("СпособЗачетаАвансов", 	Перечисления.СпособыЗачетаАвансов.Автоматически);
		ДанныеЗаполненияДокумента.Вставить("ВалютаДокумента", 		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		ДанныеЗаполненияДокумента.Вставить("КурсВзаиморасчетов", 	1);
		ДанныеЗаполненияДокумента.Вставить("КратностьВзаиморасчетов", 1);
		
		ОбщиеДанныеЗаполнения.ПоДокументам.Вставить(ВидыДокументов.РеализацияТоваровУслуг.Имя, ДанныеЗаполненияДокумента);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОбщиеДанныеЗаполнения, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ОбщиеДанныеЗаполнения;

КонецФункции

Функция ПолучитьСпецификации(Номенклатура)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпецификацииНоменклатуры.Владелец КАК Номенклатура,
	               |	СпецификацииНоменклатуры.Ссылка КАК Спецификация,
	               |	ВЫБОР
	               |		КОГДА СпецификацииНоменклатуры.Владелец.ОсновнаяСпецификацияНоменклатуры = СпецификацииНоменклатуры.Ссылка
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	Справочник.СпецификацииНоменклатуры КАК СпецификацииНоменклатуры
	               |ГДЕ
	               |	СпецификацииНоменклатуры.Владелец В(&Номенклатура)
	               |	И СпецификацииНоменклатуры.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок
	               |ИТОГИ ПО
	               |	Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();
	ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Спецификации = Новый Соответствие;
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаДетальная = ВыборкаНоменклатура.Выбрать();
		
		Пока ВыборкаДетальная.Следующий() Цикл
			Спецификации.Вставить(ВыборкаДетальная.Номенклатура, ВыборкаДетальная.Спецификация);
			Прервать;
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Спецификации;

КонецФункции

Функция ПолучитьКомментарий()
	
	Возврат "#Создан обработкой Выпуск и реализация продукции#";
	
КонецФункции

Функция ПолучитьДоговорыСРеквизитами(Контрагенты, Организация)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	               |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаДокумента,
	               |	ДоговорыКонтрагентов.ТипЦен КАК ТипЦен,
	               |	1 КАК Порядок
	               |ПОМЕСТИТЬ ВТДоговоры
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	               |	И ДоговорыКонтрагентов.Организация = &Организация
	               |	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	               |	И ДоговорыКонтрагентов.Владелец В(&Контрагенты)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОсновныеДоговоры.Контрагент КАК Контрагент,
	               |	ОсновныеДоговоры.Договор КАК ДоговорКонтрагента
	               |ПОМЕСТИТЬ ВТДоговорыРегистр
	               |ИЗ
	               |	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговоры
	               |ГДЕ
	               |	ОсновныеДоговоры.ВидДоговора = &ВидДоговора
	               |	И ОсновныеДоговоры.Организация = &Организация
	               |	И ОсновныеДоговоры.Контрагент В(&Контрагенты)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДоговоры.Контрагент КАК Контрагент,
	               |	ВТДоговоры.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВТДоговоры.ВалютаДокумента КАК ВалютаДокумента,
	               |	ВТДоговоры.ТипЦен КАК ТипЦен,
	               |	ВЫБОР
	               |		КОГДА ВТДоговорыРегистр.ДоговорКонтрагента ЕСТЬ NULL
	               |			ТОГДА ВТДоговоры.Порядок
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	ВТДоговоры КАК ВТДоговоры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговорыРегистр КАК ВТДоговорыРегистр
	               |		ПО ВТДоговоры.Контрагент = ВТДоговорыРегистр.Контрагент
	               |			И ВТДоговоры.ДоговорКонтрагента = ВТДоговорыРегистр.ДоговорКонтрагента
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Контрагент,
	               |	Порядок";
	
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьДоговор(Договоры, Контрагент)

	Если Договоры = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	НайденнныеДоговоры = Договоры.НайтиСтроки(Новый Структура("Контрагент", Контрагент));
	Если НайденнныеДоговоры.Количество() > 0 Тогда
		Возврат НайденнныеДоговоры[0].ДоговорКонтрагента;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ДатаВремяКрайнегоДокумента(ВидДокумента)

	ШаблонЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	Док.Дата КАК Дата
	                |ИЗ
	                |	Документ.РеализацияТоваровУслуг КАК Док
	                |ГДЕ
	                |	Док.Организация = &Организация
	                |	И Док.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	                |	И (ВЫРАЗИТЬ(Док.Комментарий КАК СТРОКА(1000))) = &Комментарий
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Дата УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "РеализацияТоваровУслуг", ВидДокумента);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("Комментарий", ПолучитьКомментарий());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Дата, Дата);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДанныеОТоварах

Функция ПолучитьДанныеОТоварах(ТабДокумент)

	ДеревоТоваров = ПолучитьОписаниеТаблицыТоваров();
	
	ТекНомерПоследнейСтроки 	= Мин(НомерПоследнейСтроки, 	ТабДокумент.ВысотаТаблицы);
	ТекНомерПоследнейКолонки 	= Мин(НомерПоследнейКолонки, 	ТабДокумент.ШиринаТаблицы);
	
	МассивНоменклатуры 	= Новый Массив;
	Контрагенты 		= Новый Массив;
	
	Для НомерСтроки = НомерПервойСтроки По ТекНомерПоследнейСтроки Цикл
		
		КонтрагентСтрокиТабДок = ПолучитьЗначениеЯчейки(ТабДокумент, НомерСтроки, 1, НомерСтроки, 1);
		
		НоменклатураПоКонтрагенту = Неопределено;
		Для НомерКолонки = НомерПервойКолонки По ТекНомерПоследнейКолонки Цикл
			
			Номенклатура 	= ПолучитьЗначениеЯчейки(ТабДокумент, 1, НомерКолонки, 1, НомерКолонки);
			Количество 		= ПолучитьЗначениеЯчейки(ТабДокумент, НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Количество 		= ?(ТипЗнч(Количество) = Тип("Число"), Количество, 0);
			
			СтрокаНеКорректна = Не ЗначениеЗаполнено(Номенклатура)
				Или ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура")
				Или Количество <= 0;
			
			Если СтрокаНеКорректна Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивНоменклатуры.Найти(Номенклатура) = Неопределено Тогда
				МассивНоменклатуры.Добавить(Номенклатура);
			КонецЕсли;
			
			Если НоменклатураПоКонтрагенту = Неопределено Тогда
				
				НоменклатураПоКонтрагенту 				= ДеревоТоваров.Строки.Добавить();
				НоменклатураПоКонтрагенту.Контрагент 	= КонтрагентСтрокиТабДок;
				НоменклатураПоКонтрагенту 				= НоменклатураПоКонтрагенту.Строки;
				
				Если ЗначениеЗаполнено(КонтрагентСтрокиТабДок) И Контрагенты.Найти(КонтрагентСтрокиТабДок) = Неопределено Тогда
					Контрагенты.Добавить(КонтрагентСтрокиТабДок);
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока = НоменклатураПоКонтрагенту.Добавить();
			НоваяСтрока.Номенклатура 		= Номенклатура;
			НоваяСтрока.Количество 			= Количество;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеОТоварах = Новый Структура;
	ДанныеОТоварах.Вставить("ДеревоНоменклатуры", 	ДеревоТоваров);
	ДанныеОТоварах.Вставить("Номенклатура", 		МассивНоменклатуры);
	ДанныеОТоварах.Вставить("Контрагенты", 			Контрагенты);
	
	Возврат ДанныеОТоварах;

КонецФункции

Функция ПолучитьТаблицуИзДереваТоваров(ДеревоТоваров)
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ДеревоТоваров.Колонки Цикл
		ТаблицаТоваров.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок);
	КонецЦикла;
	
	Для Каждого СтрокаПолучатель Из ДеревоТоваров.Строки Цикл
		Для Каждого СтрокаТовары Из СтрокаПолучатель.Строки Цикл
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаТоваров;

КонецФункции

Функция ПолучитьЗначениеЯчейки(ТабДокумент, НомерПервСтроки, НомерПервКолонки, НомерПоследСтроки, НомерПоследКолонки, Значение = Истина)
	
	Попытка
		Возврат ТабДокумент.Область(НомерПервСтроки, НомерПервКолонки, НомерПоследСтроки, НомерПоследКолонки)[?(Значение, "Значение", "Текст")];
	Исключение
		Возврат Неопределено
	КонецПопытки;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыТоваров(Дерево = Истина)
	
	Число15_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой));
	Число15_3 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой));
	
	ТаблицаСведений = ?(Дерево, Новый ДеревоЗначений, Новый ТаблицаЗначений);
	ТаблицаСведений.Колонки.Добавить("Контрагент");
	ТаблицаСведений.Колонки.Добавить("Номенклатура", 		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСведений.Колонки.Добавить("Количество", 			Число15_3);
	
	Возврат ТаблицаСведений;

КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
